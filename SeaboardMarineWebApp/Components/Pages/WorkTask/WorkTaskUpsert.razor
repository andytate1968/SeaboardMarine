@page "/worktask/create"
@page "/worktask/edit/{id:int}"
@rendermode InteractiveServer
@inject ITaskRepository _taskRepository
@inject NavigationManager _navigationManager
@inject ITaskService _taskService
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Task</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <Card >
                <CardBody>
            <EditForm Model="Model" OnValidSubmit="UpsertTask" FormName="TaskForm">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Title</label
                    <InputText @bind-Value="Model!.Title" class="form-control"></InputText>
                    <ValidationMessage For="@(() => Model!.Title)" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <InputText @bind-Value="Model!.Description" class="form-control"></InputText>
                    <ValidationMessage For="@(() => Model!.Description)" />
                </div>                
                <div class="form-group">
                    <label>Due Date</label>
                    <DateInput TValue="DateTime" @bind-Value="Model!.DueDate" Placeholder="Enter Date" />
                    <ValidationMessage For="@(() => Model!.DueDate)" />
                </div>
                 <div class="form-group">
                    <label>Is Complete</label>
                    <InputCheckbox @bind-Value="Model!.IsCompleted" />
                </div>
                <div class="form-group">
                    @if(Model.TaskTags != null) {
                    @foreach (var tag in @Model!.TaskTags.Where(t=>t.IsDelete == null || t.IsDelete == false))
                    {                                    
                        <button type="button" class="btn btn-primary" style="margin-right:5px" @onclick="()=>DeleteTag(tag.Id)">@tag.TagName (delete)</button>         
                    }
                        <InputText @bind-Value="newtag" style="width:75px"></InputText>
                        <button type="button" class="btn btn-primary" @onclick="AddTag">Add Tag</button>   
                    }
                </div>                
                <div class="form-group py-2">
                    <button type="submit" class="btn btn-primary">@Title</button>
                    <NavLink href="worktask" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
            </CardBody>
            </Card>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public TaskDto? Model { get; set; }
    private ConfirmDialog dialog;
    protected override void OnInitialized() => Model ??= new();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string newtag { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                Model!.DueDate = DateTime.Now;
                Model!.TaskTags = new List<TaskTagDto>();
                //create
                IsLoading = false;
                StateHasChanged();
            }
            else
            {
                
                //update
                Title = "Update";
                await LoadTask();
            }
        }

    }

    private async Task LoadTask()
    {
        IsLoading = true;
        StateHasChanged();
        Model = await _taskRepository.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }
    private async Task UpsertTask()
    {
        if (Model.Id == 0)
        {
            //create
            await _taskRepository.Create(Model);
        }
        else
        {
            //update
            await _taskRepository.Update(Model);
        }
        _navigationManager.NavigateTo("worktask",true,true);


    }

    private async Task DeleteTag(int id)
    {
        foreach (var tag in Model.TaskTags)
        {
            if (tag.Id == id)
            {
                tag.IsDelete = true;
            }
        }
        //StateHasChanged();
    }
    private void AddTag()
    {
        var tag = new TaskTagDto();
        tag.Id = 0;
        tag.TagName = newtag;
        tag.IsNew = true;
        newtag = "";
        Model.TaskTags.Add(tag);
        StateHasChanged();
    }
}
